/* Plugin generated by AMXX-Studio */

#include <amxmodx>
#include <amxmisc>
#include <sqlx>

#define PLUGIN "cstrike-webadmin"
#define VERSION "1.0"
#define AUTHOR "4evergaming"

//#define DEBUG

#define PREFIX "[SERVER]"

#define MAX_LENGHT_SQL 64

#define SERVER_ID 1

#define SQL_HOST ""
#define SQL_USER ""
#define SQL_PASSWORD ""
#define SQL_DATABASE ""

#define MYSQL_LOG "MYSQL_ERROR.txt"

#define MAX_LIST 250

// manejador de conexion sql
new Handle:g_SqlTuple;

enum {
    PLAYERS_INSERT,
    ADMINISTRATORS_SELECT,
    BANS_SELECT,
}

new gBanAuth[MAX_LIST+1][44];
new gBanIp[MAX_LIST+1][32];

public plugin_init() {
	register_plugin(PLUGIN, VERSION, AUTHOR)
	
	if (MYSQL_Init()) {
		loadAdmins();
		
		loadBans();
	}
}

public MYSQL_Init() {   
			
	g_SqlTuple = SQL_MakeDbTuple(SQL_HOST, SQL_USER, SQL_PASSWORD, SQL_DATABASE);
	
	if (!g_SqlTuple)
	{
		log_to_file(MYSQL_LOG, "Could not create database tuple")
        
		// Pausamos el plugin
		return pause("a");
	}
	
	
	return true;
} 

public loadAdmins() {
	new szQuery[300];
	formatex(szQuery, charsmax(szQuery), "SELECT A.auth, A.password, R.access_flags, A.account_flags, IF(A.expiration < CURRENT_DATE, 'expired', 'not expired') as expiration  FROM administrators A JOIN privileges P ON A.id = P.administrator_id JOIN ranks R ON A.rank_id = R.id WHERE P.server_id = %d",SERVER_ID);
	
	#if defined DEBUG
		server_print("%s", szQuery);
	#endif
	
	executeLoadQuery(szQuery, ADMINISTRATORS_SELECT);
}


public loadBans() {

	new szQuery[300];
	formatex(szQuery, charsmax(szQuery), "SELECT steam_id, ip FROM bans where expiration >= CURRENT_TIMESTAMP() AND server_id = %d", SERVER_ID);
	
	#if defined DEBUG
		server_print("%s", szQuery);
	#endif
	
	executeLoadQuery(szQuery, BANS_SELECT);
}

public client_putinserver(id) {
		
	registerPlayerLogin(id);
	
	if (is_banned_user(id)) {
		kickPlayer(id, "Your IP or Steam ID is banned on this server");
		return;
	}
	
}

public is_banned_user(id) {
	
	if (is_user_admin(id) && has_flag(id, "a")) {
		return false;
	}
	
	new i = 0;
	new banned = false;
	
	
	while (i < MAX_LIST && !banned) {
		
		static auth[32];
		get_user_authid(id, auth, charsmax(auth));
		
		
		static ip[32];
		get_user_ip(id, ip, charsmax(ip), 1)
		
		
		if (equal(ip, gBanIp[i]) || equal(auth, gBanAuth[i])) {
			banned = true;
		}
		
		i++;
	}
	
	return banned;
}

public registerPlayerLogin(id) {
	static name[32];
	get_user_name(id, name, 31);
	
	static auth[32];
	get_user_authid(id, auth, charsmax(auth));
	
	
	static ip[32];
	get_user_ip(id, ip, charsmax(ip), 1)
	
	new szQuery[200];
	formatex(szQuery, charsmax(szQuery), "INSERT INTO `players` (`name`, `steam_id`, `ip`, `server_id`) VALUES (^"%s^", ^"%s^", ^"%s^", ^"%d^");", name, auth, ip, SERVER_ID)

	executeQuery(szQuery, id, PLAYERS_INSERT);
	
	#if defined DEBUG
		server_print("%s", szQuery);
	#endif
}


public executeQuery(szQuery[], id, action) {
	new data[2]
	data[0] = id;
	data[1] = action;
	
	SQL_ThreadQuery(g_SqlTuple, "DataHandler", szQuery, data, 2); 
}

public executeLoadQuery(szQuery[], action) {
	new data[1]
	data[0] = action;
	
	SQL_ThreadQuery(g_SqlTuple, "DataLoadHandler", szQuery, data, 1); 
}

public DataHandler( failstate, Handle:Query, error[ ], error2, data[ ], datasize, Float:time ) {
	
	static id;
	id = data[0];
    
	if(!is_user_connected(id))
		return;

	switch(failstate) {
		case TQUERY_CONNECT_FAILED: {
			log_to_file(MYSQL_LOG, "Error connecting to MySQL [%i]: %s",error2, error);
			return;
		}
        
		case TQUERY_QUERY_FAILED: {
			log_to_file(MYSQL_LOG, "Error connecting to MySQL [%i]: %s",error2, error);
			return;
		}
	}
	
	
	switch (data[1]) {
		case PLAYERS_INSERT: {
		
			client_print_color(id, print_chat, "^4%s ^1Your data was recorded when entering the server for security reasons", PREFIX);
		}
	}
}


public DataLoadHandler( failstate, Handle:query, error[ ], error2, data[ ], datasize, Float:time ) {

	switch(failstate) {
		case TQUERY_CONNECT_FAILED: {
			log_to_file(MYSQL_LOG, "Error connecting to MySQL [%i]: %s",error2, error);
			return;
		}
        
		case TQUERY_QUERY_FAILED: {
			log_to_file(MYSQL_LOG, "Error connecting to MySQL [%i]: %s",error2, error);
			return;
		}
	}
	
	
	switch (data[0]) {
		case ADMINISTRATORS_SELECT: {
		
			if (!SQL_NumResults(query)) {
				log_amx("No admins found");
				return;
			}
			
			
			new colAuth = SQL_FieldNameToNum(query, "auth");
			new colPass = SQL_FieldNameToNum(query, "password");
			new colAccessFlags = SQL_FieldNameToNum(query, "access_flags");
			new colAccountFlags = SQL_FieldNameToNum(query, "account_flags");
			new colExpiration = SQL_FieldNameToNum(query, "expiration");
						
						
			new auth[44];
			new password[44];
			new accessFlags[32];
			new accountFlags[32];
			new expiration[32];
			
			while(SQL_MoreResults(query)) {
				
				SQL_ReadResult(query, colAuth, auth, sizeof(auth) - 1);
				SQL_ReadResult(query, colPass, password, sizeof(password) -1);
				SQL_ReadResult(query, colAccessFlags, accessFlags, sizeof(accessFlags) - 1);
				SQL_ReadResult(query, colAccountFlags, accountFlags, sizeof(accountFlags) - 1);
				SQL_ReadResult(query, colExpiration, expiration, sizeof(expiration) - 1);
				
				
				if(equal(expiration, "expired")) {
					accessFlags = "z";
				}
			
				admins_push(auth, password, read_flags(accessFlags) , read_flags(accountFlags));
				
				
				#if defined DEBUG
					server_print("ADMIN LOADED: ^"%s^" ^"%s^" ^"%s^" ^"%s^" ^"%s^"", auth, password, accessFlags, accountFlags, expiration);
				#endif
				
				SQL_NextRow(query);
			}
		}
		
		
		case BANS_SELECT: {
		
			if (!SQL_NumResults(query)) {
				log_amx("No bans found");
				return;
			}
			
			
			new colSteamId = SQL_FieldNameToNum(query, "steam_id");
			new colIp = SQL_FieldNameToNum(query, "ip");
						
						
			new steamId[44];
			new ip[32];
			
			new count = 0;
			
			while(SQL_MoreResults(query)) {
				
				SQL_ReadResult(query, colSteamId, steamId, sizeof(steamId) - 1);
				SQL_ReadResult(query, colIp, ip, sizeof(ip) -1);
				
				gBanAuth[count] = steamId;
				gBanIp[count] = ip;
				
				count++;
				
				#if defined DEBUG
					server_print("BAN LOADED: ^"%s^" ^"%s^"", steamId, ip);
				#endif
				
				if (count == MAX_LIST) {
					log_amx("Bans limit reached");
					break;
				}
				
				SQL_NextRow(query);
			}
		}
	}
}

public kickPlayer(id, razon[]) {
	new userid = get_user_userid(id)
	server_cmd("kick #%d ^"%s^"",userid, razon)
}
